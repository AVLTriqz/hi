--=============================================================
-- ⚡ YHub Premium v16 — Full Premium Dashboard + Themes + Persistence + Promo
-- Script Created by: YOUNG
--=============================================================
-- Place in StarterPlayerScripts (LocalScript)
-- Server persistence: create a RemoteEvent "YHub_SaveData" in ReplicatedStorage and implement server DataStore handling (example below).

-- Example server-side (ServerScriptService) DataStore snippet (OPTIONAL, required for cross-session persistence):
--[[
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local DataStoreService = game:GetService("DataStoreService")
local SaveEvent = ReplicatedStorage:WaitForChild("YHub_SaveData") -- RemoteEvent

local ds = DataStoreService:GetDataStore("YHubPremium_v1")

SaveEvent.OnServerEvent:Connect(function(player, action, payload)
    if action == "save" and type(payload) == "table" then
        local key = "yhub_"..player.UserId
        ds:SetAsync(key, payload)
    elseif action == "load" then
        local key = "yhub_"..player.UserId
        local ok, dat = pcall(function() return ds:GetAsync(key) end)
        SaveEvent:FireClient(player, "loaded", ok and dat or nil)
    end
end)
]]

-- // CLIENT SCRIPT START
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- ================== CONFIG & STATE ==================
local TASER_NAME = "Taser Gun"
local DEFAULT_RADIUS = 14
local HUB_W, HUB_H = 460, 340

local autoTaseEnabled = false
local auraPart, fovCircle
local playersInRange = 0

-- Persistence remote (optional)
local SaveEvent = ReplicatedStorage:FindFirstChild("YHub_SaveData") -- RemoteEvent expected on server
local persistenceAvailable = (SaveEvent ~= nil)

-- Default persistent data
local defaultData = {
    theme = "Neon",      -- Dark | Neon | Sunset
    radius = DEFAULT_RADIUS,
    dockX = nil,
    dockY = nil,
}

-- cached loaded data
local savedData = {}

-- ================== SOUNDS ==================
local function makeSound(parent, id, vol, name)
    local s = Instance.new("Sound", parent)
    s.Name = name or "YHubSound"
    s.SoundId = "rbxassetid://"..tostring(id)
    s.Volume = vol or 0.5
    s.Looped = false
    return s
end

local soundFolder = Instance.new("Folder", PlayerGui); soundFolder.Name = "YHubSounds"
local sHover  = makeSound(soundFolder, 9118825481, 0.22, "Hover")
local sClick  = makeSound(soundFolder, 9118831569, 0.5,  "Click")
local sOpen   = makeSound(soundFolder, 12221967,    0.6,  "Open")
local sNotif  = makeSound(soundFolder, 9119136260, 0.6,  "Notif")

-- ================== UTILITIES ==================
local function equipTaser()
    local tool = ReplicatedStorage:FindFirstChild(TASER_NAME)
    if tool then
        local backpack = LocalPlayer:WaitForChild("Backpack")
        if not backpack:FindFirstChild(TASER_NAME) then
            tool:Clone().Parent = backpack
        end
    end
end

-- Aura + FOV creation helpers
local function createAura(radius)
    if auraPart then auraPart:Destroy() end
    local r = radius or DEFAULT_RADIUS
    local part = Instance.new("Part")
    part.Name = "YHubAura"
    part.Size = Vector3.new(r*2, r*2, r*2)
    part.Anchored = true
    part.CanCollide = false
    part.Material = Enum.Material.Neon
    part.Shape = Enum.PartType.Ball
    part.Transparency = 0.6
    part.Parent = workspace
    auraPart = part
    spawn(function()
        local t = 0
        while auraPart and auraPart.Parent do
            t = t + 0.008
            auraPart.Color = Color3.fromHSV(t%1, 0.95, 0.95)
            local char = LocalPlayer.Character
            if char and char:FindFirstChild("HumanoidRootPart") then
                auraPart.CFrame = char.HumanoidRootPart.CFrame
            end
            RunService.RenderStepped:Wait()
        end
    end)
end

local function createFOV(radius)
    if fovCircle then fovCircle:Destroy() end
    local r = radius or DEFAULT_RADIUS
    local part = Instance.new("Part")
    part.Name = "YHubFOV"
    part.Anchored = true
    part.CanCollide = false
    part.Size = Vector3.new(r*2, 0.2, r*2)
    part.Material = Enum.Material.Neon
    part.Transparency = 0.55
    part.Shape = Enum.PartType.Cylinder
    part.Parent = workspace
    fovCircle = part
    spawn(function()
        local t = 0
        while fovCircle and fovCircle.Parent do
            t = t + 0.008
            fovCircle.Color = Color3.fromHSV(t%1, 0.95, 0.95)
            local char = LocalPlayer.Character
            if char and char:FindFirstChild("HumanoidRootPart") then
                fovCircle.CFrame = CFrame.new(char.HumanoidRootPart.Position + Vector3.new(0,0.3,0)) * CFrame.Angles(math.rad(90),0,0)
            end
            RunService.RenderStepped:Wait()
        end
    end)
end

-- Auto-tase connection (single)
local autoTaseConn
local function startAutoTase(radius)
    if autoTaseConn then return end
    autoTaseConn = RunService.RenderStepped:Connect(function()
        if not autoTaseEnabled then return end
        local char = LocalPlayer.Character
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if hrp then
            if not auraPart then createAura(radius) end
            if not fovCircle then createFOV(radius) end
            local taser = LocalPlayer.Backpack:FindFirstChild(TASER_NAME) or (char and char:FindFirstChild(TASER_NAME))
            if taser then
                local count = 0
                for _,pl in ipairs(Players:GetPlayers()) do
                    if pl ~= LocalPlayer and pl.Character and pl.Character:FindFirstChild("HumanoidRootPart") then
                        local otherHRP = pl.Character.HumanoidRootPart
                        local dist = (hrp.Position - otherHRP.Position).Magnitude
                        if dist <= (radius or DEFAULT_RADIUS) then
                            count = count + 1
                            pcall(function() taser:Activate() end)
                        end
                    end
                end
                playersInRange = count
            end
        end
    end)
end

local function stopAutoTase()
    if autoTaseConn then
        autoTaseConn:Disconnect()
        autoTaseConn = nil
    end
    if auraPart then auraPart:Destroy(); auraPart=nil end
    if fovCircle then fovCircle:Destroy(); fovCircle=nil end
    playersInRange = 0
end

-- ================== PERSISTENCE HELPERS ==================
local function requestServerLoad()
    if not persistenceAvailable then return end
    local ok,err = pcall(function()
        SaveEvent:FireServer("load")
    end)
    if not ok then
        warn("YHub: failed to request server load:", err)
    end
end

local function requestServerSave(payload)
    if not persistenceAvailable then return end
    local ok,err = pcall(function()
        SaveEvent:FireServer("save", payload)
    end)
    if not ok then warn("YHub: failed to request server save:", err) end
end

-- if SaveEvent exists, listen for server replies
if persistenceAvailable then
    SaveEvent.OnClientEvent:Connect(function(action, data)
        if action == "loaded" then
            if data and type(data) == "table" then
                savedData = data
                print("YHub: loaded saved data from server.")
            else
                savedData = {}
            end
        end
    end)
end

-- local fallback save/load using player attributes (session-only)
local function localSave(data)
    if type(data.theme) == "string" then LocalPlayer:SetAttribute("YHub_Theme", data.theme) end
    if type(data.radius) == "number" then LocalPlayer:SetAttribute("YHub_Radius", data.radius) end
    if type(data.dockX) == "number" then LocalPlayer:SetAttribute("YHub_DockX", data.dockX) end
    if type(data.dockY) == "number" then LocalPlayer:SetAttribute("YHub_DockY", data.dockY) end
end

local function localLoad()
    local out = {}
    out.theme = LocalPlayer:GetAttribute("YHub_Theme") or defaultData.theme
    out.radius = LocalPlayer:GetAttribute("YHub_Radius") or defaultData.radius
    out.dockX = LocalPlayer:GetAttribute("YHub_DockX")
    out.dockY = LocalPlayer:GetAttribute("YHub_DockY")
    return out
end

-- try to initialize savedData: prefer server (if available) else local
if persistenceAvailable then
    requestServerLoad()
    -- give server a short time to respond, fallback to local after 1s
    delay(1, function()
        if next(savedData) == nil then
            savedData = localLoad()
        end
    end)
else
    savedData = localLoad()
end

-- ================== GUI BUILD ==================
local gui = Instance.new("ScreenGui")
gui.Name = "YHubPremiumGUI"
gui.ResetOnSpawn = false
gui.IgnoreGuiInset = true
gui.Parent = PlayerGui

-- Toasts
local notifFolder = Instance.new("Folder", gui); notifFolder.Name = "Notifs"
local function showToast(title, body, duration)
    duration = duration or 3.5
    local frame = Instance.new("Frame", notifFolder)
    frame.Size = UDim2.new(0,320,0,76)
    frame.Position = UDim2.new(1,-340,0.06,0)
    frame.AnchorPoint = Vector2.new(1,0)
    frame.BackgroundColor3 = Color3.fromRGB(20,20,26)
    frame.BorderSizePixel = 0
    local corner = Instance.new("UICorner", frame); corner.CornerRadius = UDim.new(0,10)
    local stroke = Instance.new("UIStroke", frame); stroke.Color=Color3.fromRGB(80,180,255); stroke.Transparency=0.82

    local titleLbl = Instance.new("TextLabel", frame)
    titleLbl.Size = UDim2.new(1,-16,0,20); titleLbl.Position = UDim2.new(0,12,0,8)
    titleLbl.BackgroundTransparency = 1; titleLbl.Font = Enum.Font.GothamBold; titleLbl.TextSize = 15
    titleLbl.TextColor3 = Color3.fromRGB(240,240,255); titleLbl.Text = title

    local bodyLbl = Instance.new("TextLabel", frame)
    bodyLbl.Size = UDim2.new(1,-16,0,36); bodyLbl.Position = UDim2.new(0,12,0,30)
    bodyLbl.BackgroundTransparency = 1; bodyLbl.Font = Enum.Font.Gotham; bodyLbl.TextSize = 13
    bodyLbl.TextColor3 = Color3.fromRGB(190,190,210); bodyLbl.TextWrapped = true; bodyLbl.Text = body

    TweenService:Create(frame, TweenInfo.new(0.36, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(1,-16,0.06,0)}):Play()
    pcall(function() sNotif:Play() end)
    delay(duration, function()
        TweenService:Create(frame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {Position = UDim2.new(1,-340,0.06,0)}):Play()
        wait(0.33)
        frame:Destroy()
    end)
end

-- Dock orb (floating, draggable)
local dock = Instance.new("TextButton", gui)
dock.Name = "YHubDock"
dock.Size = UDim2.new(0,62,0,62)
-- restore position from savedData or attributes
local savedX = savedData.dockX or LocalPlayer:GetAttribute("YHub_DockX")
local savedY = savedData.dockY or LocalPlayer:GetAttribute("YHub_DockY")
if savedX and savedY then
    dock.Position = UDim2.new(0, savedX, 0, savedY)
else
    dock.Position = UDim2.new(0.06, 0, 0.8, 0)
end
dock.AnchorPoint = Vector2.new(0.5,0.5)
dock.BackgroundColor3 = Color3.fromRGB(18,18,24)
dock.AutoButtonColor = false
dock.Text = "⚡"
dock.Font = Enum.Font.GothamBold
dock.TextSize = 28
dock.TextColor3 = Color3.fromRGB(230,230,255)
local dockCorner = Instance.new("UICorner", dock); dockCorner.CornerRadius = UDim.new(1,0)
local dockStroke = Instance.new("UIStroke", dock); dockStroke.Thickness = 2; dockStroke.Color = Color3.fromRGB(80,200,255)
spawn(function()
    local t=0
    while dock.Parent do
        t = t + 0.01
        dockStroke.Color = Color3.fromHSV((t*0.06)%1, 0.9, 0.95)
        RunService.RenderStepped:Wait()
    end
end)

-- drag logic & save on release
local draggingDock = false
local dockDragStart, dockStartPos, dockInput
dock.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        draggingDock = true
        dockDragStart = input.Position
        dockStartPos = dock.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                draggingDock = false
                local abs = dock.AbsolutePosition
                local payload = {dockX = math.floor(abs.X), dockY = math.floor(abs.Y)}
                -- local save
                LocalPlayer:SetAttribute("YHub_DockX", payload.dockX)
                LocalPlayer:SetAttribute("YHub_DockY", payload.dockY)
                -- attempt server save
                if persistenceAvailable then
                    local toSave = { theme = savedData.theme or defaultData.theme, radius = savedData.radius or defaultData.radius, dockX = payload.dockX, dockY = payload.dockY }
                    requestServerSave(toSave)
                end
            end
        end)
    end
end)
dock.InputChanged:Connect(function(input) if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then dockInput = input end end)
RunService.RenderStepped:Connect(function()
    if draggingDock and dockInput then
        local delta = dockInput.Position - dockDragStart
        local newPos = UDim2.new(dockStartPos.X.Scale, dockStartPos.X.Offset + delta.X, dockStartPos.Y.Scale, dockStartPos.Y.Offset + delta.Y)
        -- clamp
        local cam = workspace.CurrentCamera
        local vw, vh = (cam and cam.ViewportSize.X) or 1280, (cam and cam.ViewportSize.Y) or 720
        local nx = math.clamp(newPos.X.Offset, 8, vw-64)
        local ny = math.clamp(newPos.Y.Offset, 8, vh-64)
        dock.Position = UDim2.new(0, nx, 0, ny)
    end
end)

-- Main Hub (glass-like)
local hub = Instance.new("Frame", gui)
hub.Name = "YHubMain"
hub.Size = UDim2.new(0, HUB_W, 0, HUB_H)
hub.Position = UDim2.new(-1, 0, 0.12, 0)
hub.BackgroundColor3 = Color3.fromRGB(14,14,20)
hub.BackgroundTransparency = 0.04
hub.BorderSizePixel = 0
hub.Visible = false
local hubCorner = Instance.new("UICorner", hub); hubCorner.CornerRadius = UDim.new(0,16)
local hubStroke = Instance.new("UIStroke", hub); hubStroke.Thickness = 2; hubStroke.Transparency = 0.7

-- Left Sidebar w/ icons & tabs
local sidebar = Instance.new("Frame", hub)
sidebar.Size = UDim2.new(0, 140, 1, 0)
sidebar.Position = UDim2.new(0,0,0,0)
sidebar.BackgroundTransparency = 1

local function iconLabel(parent, emoji)
    local lbl = Instance.new("TextLabel", parent)
    lbl.Size = UDim2.new(0,28,0,28)
    lbl.BackgroundTransparency = 1
    lbl.Font = Enum.Font.GothamBold
    lbl.TextSize = 18
    lbl.Text = emoji
    return lbl
end

local tabButtons = {}
local function makeTab(name, emoji, y)
    local btn = Instance.new("TextButton", sidebar)
    btn.Size = UDim2.new(1, -18, 0, 44)
    btn.Position = UDim2.new(0,9,0,y)
    btn.BackgroundColor3 = Color3.fromRGB(26,26,32)
    btn.Text = ""
    btn.AutoButtonColor = false
    local corner = Instance.new("UICorner", btn); corner.CornerRadius = UDim.new(0,8)
    local stroke = Instance.new("UIStroke", btn); stroke.Color = Color3.fromRGB(80,160,255); stroke.Transparency = 0.92; stroke.Thickness = 1

    local ic = iconLabel(btn, emoji)
    ic.Position = UDim2.new(0,8,0,8)
    local label = Instance.new("TextLabel", btn)
    label.Size = UDim2.new(1, -48, 1, 0)
    label.Position = UDim2.new(0,40,0,0)
    label.BackgroundTransparency = 1
    label.Font = Enum.Font.GothamBold; label.TextSize = 14; label.TextColor3 = Color3.fromRGB(230,230,255); label.Text = name; label.TextXAlignment = Enum.TextXAlignment.Left

    tabButtons[name] = btn
    return btn
end

local btnHome = makeTab("Home", "🏠", 8)
local btnAuto = makeTab("Auto-Tase", "🔫", 60)
local btnSet  = makeTab("Settings", "⚙️", 112)
local btnCred = makeTab("Credits", "👑", 164)

-- Content area
local content = Instance.new("Frame", hub)
content.Size = UDim2.new(1, -140, 1, -24)
content.Position = UDim2.new(0,140,0,12)
content.BackgroundTransparency = 1

local pages = {}
local function newPage(name)
    local p = Instance.new("Frame", content)
    p.Size = UDim2.new(1,0,1,0)
    p.BackgroundTransparency = 1
    p.Visible = false
    pages[name] = p
    return p
end

-- Home page
local home = newPage("Home")
local homeTitle = Instance.new("TextLabel", home)
homeTitle.Size = UDim2.new(1, -24, 0, 28); homeTitle.Position = UDim2.new(0,12,0,0)
homeTitle.BackgroundTransparency = 1; homeTitle.Font = Enum.Font.GothamBold; homeTitle.TextSize = 18
homeTitle.Text = "Welcome — YHub Premium"; homeTitle.TextColor3 = Color3.fromRGB(240,240,255); homeTitle.TextXAlignment = Enum.TextXAlignment.Left

local homeBody = Instance.new("TextLabel", home)
homeBody.Size = UDim2.new(1, -24, 0, 92); homeBody.Position = UDim2.new(0,12,0,34)
homeBody.BackgroundTransparency = 1; homeBody.Font = Enum.Font.Gotham; homeBody.TextSize = 14
homeBody.TextColor3 = Color3.fromRGB(200,200,220); homeBody.TextWrapped = true
homeBody.Text = "Dashboard-style hub with themes, persistence, animated tabs, promo export, and auto-tase features. Customize settings, enable auto-tase, and show credits. Built by YOUNG."

local liveStat = Instance.new("TextLabel", home)
liveStat.Size = UDim2.new(1, -24, 0, 22); liveStat.Position = UDim2.new(0,12,0,138)
liveStat.BackgroundTransparency = 1; liveStat.Font = Enum.Font.GothamSemibold; liveStat.TextSize = 14
liveStat.TextColor3 = Color3.fromRGB(180,255,255); liveStat.Text = "Players in range: 0"

-- Auto page
local autoPage = newPage("Auto-Tase")
local autoTitle = Instance.new("TextLabel", autoPage)
autoTitle.Size = UDim2.new(1,-24,0,28); autoTitle.Position = UDim2.new(0,12,0,0)
autoTitle.BackgroundTransparency = 1; autoTitle.Font = Enum.Font.GothamBold; autoTitle.TextSize = 18
autoTitle.TextColor3 = Color3.fromRGB(240,240,255); autoTitle.Text = "Auto-Tase"

-- Animated iOS-like switch helper
local function makeSwitch(parent, labelTxt, initial)
    local container = Instance.new("Frame", parent)
    container.Size = UDim2.new(1,-24,0,52)
    container.Position = UDim2.new(0,12,0,40 + (#parent:GetChildren()*0))
    container.BackgroundTransparency = 1

    local lbl = Instance.new("TextLabel", container)
    lbl.Size = UDim2.new(0.65,0,1,0)
    lbl.BackgroundTransparency = 1
    lbl.Font = Enum.Font.Gotham; lbl.TextSize = 14; lbl.Text = labelTxt
    lbl.TextColor3 = Color3.fromRGB(220,220,235)
    lbl.TextXAlignment = Enum.TextXAlignment.Left

    local swBg = Instance.new("TextButton", container)
    swBg.Size = UDim2.new(0,64,0,36)
    swBg.AnchorPoint = Vector2.new(1,0.5)
    swBg.Position = UDim2.new(1,-12,0.5,0)
    swBg.BackgroundColor3 = Color3.fromRGB(42,42,52)
    swBg.AutoButtonColor = false
    local swCorner = Instance.new("UICorner", swBg); swCorner.CornerRadius = UDim.new(0,18)
    local swFill = Instance.new("Frame", swBg)
    swFill.Size = initial and UDim2.new(0,36,1,0) or UDim2.new(0,8,1,0)
    swFill.Position = initial and UDim2.new(1,-36,0,0) or UDim2.new(0,0,0,0)
    swFill.BackgroundColor3 = initial and Color3.fromRGB(80,200,255) or Color3.fromRGB(160,160,170)
    local swCorner2 = Instance.new("UICorner", swFill); swCorner2.CornerRadius = UDim.new(0,16)

    return {Container = container, Button = swBg, Fill = swFill, Set = function(state)
        if state then
            TweenService:Create(swFill, TweenInfo.new(0.22, Enum.EasingStyle.Quad), {Size = UDim2.new(0,36,1,0), Position = UDim2.new(1,-36,0,0), BackgroundColor3 = Color3.fromRGB(80,200,255)}):Play()
        else
            TweenService:Create(swFill, TweenInfo.new(0.22, Enum.EasingStyle.Quad), {Size = UDim2.new(0,8,1,0), Position = UDim2.new(0,0,0,0), BackgroundColor3 = Color3.fromRGB(160,160,170)}):Play()
        end
    end}
end

local autoSwitch = makeSwitch(autoPage, "Enable Auto-Tase", false)
autoSwitch.Button.MouseButton1Click:Connect(function()
    autoTaseEnabled = not autoTaseEnabled
    autoSwitch.Set(autoTaseEnabled)
    if autoTaseEnabled then
        startAutoTase(savedData.radius or LocalPlayer:GetAttribute("YHub_Radius") or DEFAULT_RADIUS)
        showToast("Auto-Tase", "Auto-Tase is ENABLED", 2.5)
    else
        stopAutoTase()
        showToast("Auto-Tase", "Auto-Tase is DISABLED", 2.5)
    end
    pcall(function() sClick:Play() end)
end)

local equipBtn = Instance.new("TextButton", autoPage)
equipBtn.Size = UDim2.new(0.48,0,0,36)
equipBtn.Position = UDim2.new(0,12,0,110)
equipBtn.BackgroundColor3 = Color3.fromRGB(42,42,56)
equipBtn.Font = Enum.Font.GothamBold; equipBtn.TextSize = 14; equipBtn.Text = "Equip Taser"
equipBtn.TextColor3 = Color3.fromRGB(235,235,245)
local equipCorner = Instance.new("UICorner", equipBtn); equipCorner.CornerRadius = UDim.new(0,8)
equipBtn.MouseButton1Click:Connect(function()
    equipTaser()
    showToast("Taser", "Taser equipped to backpack", 2.2)
    pcall(function() sClick:Play() end)
end)

-- Settings page (themes + radius slider + save/load)
local setPage = newPage("Settings")
local setTitle = Instance.new("TextLabel", setPage)
setTitle.Size = UDim2.new(1,-24,0,28); setTitle.Position = UDim2.new(0,12,0,0)
setTitle.BackgroundTransparency = 1; setTitle.Font = Enum.Font.GothamBold; setTitle.TextSize = 18
setTitle.TextColor3 = Color3.fromRGB(240,240,255); setTitle.Text = "Settings"

-- Theme presets
local themeLabel = Instance.new("TextLabel", setPage)
themeLabel.Size = UDim2.new(1,-24,0,20); themeLabel.Position = UDim2.new(0,12,0,44)
themeLabel.BackgroundTransparency = 1; themeLabel.Font = Enum.Font.Gotham; themeLabel.TextSize = 13
themeLabel.TextColor3 = Color3.fromRGB(200,200,220); themeLabel.Text = "Theme Presets"

local themeButtons = {}
local themes = {
    Dark = {
        bg = Color3.fromRGB(14,14,20),
        panel = Color3.fromRGB(20,20,26),
        accent = Color3.fromRGB(120,120,220),
    },
    Neon = {
        bg = Color3.fromRGB(8,8,12),
        panel = Color3.fromRGB(18,18,26),
        accent = Color3.fromRGB(80,200,255),
    },
    Sunset = {
        bg = Color3.fromRGB(28,12,8),
        panel = Color3.fromRGB(40,18,12),
        accent = Color3.fromRGB(255,140,80),
    }
}

local themeY = 72
for name,_ in pairs(themes) do
    local b = Instance.new("TextButton", setPage)
    b.Size = UDim2.new(0,96,0,32)
    b.Position = UDim2.new(0, 12 + (themeY - 72), 0, themeY)
    b.BackgroundColor3 = Color3.fromRGB(36,36,46)
    b.Font = Enum.Font.GothamBold
    b.TextSize = 14
    b.Text = name
    b.Name = "Theme_"..name
    local c = Instance.new("UICorner", b); c.CornerRadius = UDim.new(0,8)
    themeY = themeY + 40
    themeButtons[name] = b
end

-- apply theme function
local function applyTheme(name)
    local t = themes[name] or themes.Neon
    hub.BackgroundColor3 = t.bg
    for i,v in ipairs({hubStroke,}) do
        hubStroke.Color = t.accent
    end
    -- recolor sidebar buttons and content text
    for _,btn in pairs(tabButtons) do
        btn.BackgroundColor3 = Color3.fromRGB(26,26,32)
        local stroke = btn:FindFirstChildOfClass("UIStroke")
        if stroke then stroke.Color = t.accent end
    end
    -- recolor global text (basic)
    for _,lbl in pairs(gui:GetDescendants()) do
        if lbl:IsA("TextLabel") or lbl:IsA("TextButton") then
            -- don't override content-specific colors; keep a subtle rule: titles remain near-white
        end
    end
    savedData.theme = name
    -- save locally & attempt server save
    local payload = { theme = savedData.theme, radius = savedData.radius or DEFAULT_RADIUS, dockX = LocalPlayer:GetAttribute("YHub_DockX"), dockY = LocalPlayer:GetAttribute("YHub_DockY") }
    localSave(payload)
    if persistenceAvailable then requestServerSave(payload) end
end

for name, btn in pairs(themeButtons) do
    btn.MouseButton1Click:Connect(function()
        pcall(function() sClick:Play() end)
        applyTheme(name)
        showToast("Theme", "Applied theme: "..name, 2.2)
    end)
end

-- Radius slider (live)
local radiusLabel = Instance.new("TextLabel", setPage)
radiusLabel.Size = UDim2.new(1,-24,0,18)
radiusLabel.Position = UDim2.new(0,12,0,220)
radiusLabel.BackgroundTransparency = 1
radiusLabel.Font = Enum.Font.Gotham; radiusLabel.TextSize = 13
radiusLabel.TextColor3 = Color3.fromRGB(200,200,220)
radiusLabel.Text = "Aura / Auto-Tase Radius: "..tostring(defaultData.radius)

local sliderBG = Instance.new("Frame", setPage)
sliderBG.Size = UDim2.new(1,-48,0,18)
sliderBG.Position = UDim2.new(0,24,0,246)
sliderBG.BackgroundColor3 = Color3.fromRGB(40,40,52)
local sliderCorner = Instance.new("UICorner", sliderBG); sliderCorner.CornerRadius = UDim.new(0,8)
local sliderFill = Instance.new("Frame", sliderBG)
sliderFill.Size = UDim2.new(0.25,0,1,0)
sliderFill.BackgroundColor3 = Color3.fromRGB(80,200,255)
local fillCorner = Instance.new("UICorner", sliderFill); fillCorner.CornerRadius = UDim.new(0,8)
local handle = Instance.new("TextButton", sliderBG)
handle.Size = UDim2.new(0,16,0,16)
handle.Position = UDim2.new(0.25, -8, 0.5, -8)
handle.BackgroundColor3 = Color3.fromRGB(230,230,255)
handle.AutoButtonColor = false
handle.Text = ""
local draggingHandle = false
local function setRadiusFromPercent(p)
    p = math.clamp(p, 0, 1)
    sliderFill.Size = UDim2.new(p,0,1,0)
    handle.Position = UDim2.new(p, -8, 0.5, -8)
    local r = math.floor(6 + p * 54) -- 6..60
    radiusLabel.Text = "Aura / Auto-Tase Radius: "..tostring(r)
    savedData.radius = r
    LocalPlayer:SetAttribute("YHub_Radius", r)
    if auraPart then auraPart.Size = Vector3.new(r*2,r*2,r*2) end
    if fovCircle then fovCircle.Size = Vector3.new(r*2,0.2,r*2) end
    -- attempt server save
    if persistenceAvailable then
        local payload = { theme = savedData.theme or defaultData.theme, radius = r, dockX = LocalPlayer:GetAttribute("YHub_DockX"), dockY = LocalPlayer:GetAttribute("YHub_DockY") }
        requestServerSave(payload)
    else
        localSave({ theme = savedData.theme or defaultData.theme, radius = r })
    end
end

handle.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType==Enum.UserInputType.Touch then
        draggingHandle = true
        input.Changed:Connect(function() if input.UserInputState == Enum.UserInputState.End then draggingHandle = false end end)
    end
end)
RunService.RenderStepped:Connect(function()
    if draggingHandle then
        local abs = UserInputService:GetMouseLocation()
        local relativeX = math.clamp(abs.X - sliderBG.AbsolutePosition.X, 0, sliderBG.AbsoluteSize.X)
        local p = relativeX / sliderBG.AbsoluteSize.X
        setRadiusFromPercent(p)
    end
end)

-- initialize slider from saved or default
local initR = savedData.radius or LocalPlayer:GetAttribute("YHub_Radius") or defaultData.radius
local initP = (initR - 6)/54
setRadiusFromPercent(math.clamp(initP,0,1))

-- Credits page + promo modal
local credPage = newPage("Credits")
local credTitle = Instance.new("TextLabel", credPage)
credTitle.Size = UDim2.new(1,-24,0,28); credTitle.Position = UDim2.new(0,12,0,0)
credTitle.BackgroundTransparency = 1; credTitle.Font = Enum.Font.GothamBold; credTitle.TextSize = 18
credTitle.TextColor3 = Color3.fromRGB(240,240,255); credTitle.Text = "Credits"

local credBody = Instance.new("TextLabel", credPage)
credBody.Size = UDim2.new(1,-24,0,140); credBody.Position = UDim2.new(0,12,0,34)
credBody.BackgroundTransparency = 1; credBody.Font = Enum.Font.GothamItalic; credBody.TextSize = 14
credBody.TextColor3 = Color3.fromRGB(200,200,220)
credBody.Text = "Made with ⚡ by YOUNG\n\nContact for premium themes, skins, and custom builds."

local promoBtn = Instance.new("TextButton", credPage)
promoBtn.Size = UDim2.new(0.6,0,0,36)
promoBtn.Position = UDim2.new(0.2,0,0,180)
promoBtn.BackgroundColor3 = Color3.fromRGB(50,50,68)
promoBtn.Font = Enum.Font.GothamBold; promoBtn.TextSize = 14; promoBtn.Text = "Export Promo (screenshot-friendly)"
local promoCorner = Instance.new("UICorner", promoBtn); promoCorner.CornerRadius = UDim.new(0,10)

-- Promo modal (hidden)
local promoModal = Instance.new("Frame", gui)
promoModal.Size = UDim2.new(0,520,0,320)
promoModal.Position = UDim2.new(0.5,-260,0.08,0)
promoModal.BackgroundColor3 = Color3.fromRGB(12,12,18)
promoModal.BorderSizePixel = 0
promoModal.Visible = false
local promoCorner2 = Instance.new("UICorner", promoModal); promoCorner2.CornerRadius = UDim.new(0,12)
local promoTitle = Instance.new("TextLabel", promoModal)
promoTitle.Size = UDim2.new(1, -24, 0, 36); promoTitle.Position = UDim2.new(0,12,0,8)
promoTitle.BackgroundTransparency = 1; promoTitle.Font = Enum.Font.GothamBold; promoTitle.TextSize = 18
promoTitle.TextColor3 = Color3.fromRGB(240,240,255); promoTitle.Text = "YHub Premium — Feature List (by YOUNG)"

local promoBody = Instance.new("TextLabel", promoModal)
promoBody.Size = UDim2.new(1,-24,1,-76); promoBody.Position = UDim2.new(0,12,0,48)
promoBody.BackgroundTransparency = 1; promoBody.Font = Enum.Font.Gotham; promoBody.TextSize = 14; promoBody.TextColor3 = Color3.fromRGB(200,200,220)
promoBody.TextWrapped = true
promoBody.Text = table.concat({
    "• Premium dashboard UI with glassmorphism & neon accents",
    "• Draggable floating dock + saveable position",
    "• Themes: Neon, Dark, Sunset (one-click)",
    "• Auto-Tase system with aura & FOV visuals",
    "• Animated tab transitions & iOS-style toggles",
    "• Persistent settings (via server DataStore if enabled)",
    "• Notifications, sounds & promo export modal",
    "• Credits: Made by YOUNG"
}, "\n\n")

local promoClose = Instance.new("TextButton", promoModal)
promoClose.Size = UDim2.new(0,86,0,32); promoClose.Position = UDim2.new(1,-98,0,12)
promoClose.BackgroundColor3 = Color3.fromRGB(46,46,56)
promoClose.Font = Enum.Font.GothamBold; promoClose.TextSize = 14; promoClose.Text = "Close"
local promoCloseCorner = Instance.new("UICorner", promoClose); promoCloseCorner.CornerRadius = UDim.new(0,8)
promoClose.MouseButton1Click:Connect(function() promoModal.Visible = false; pcall(function() sClick:Play() end) end)

promoBtn.MouseButton1Click:Connect(function()
    promoModal.Visible = true
    pcall(function() sClick:Play() end)
end)

-- Tab transitions (smooth)
local currentTab = "Home"
local function switchTo(tabName)
    -- fade out current
    for k,v in pairs(pages) do
        if v.Visible and k ~= tabName then
            TweenService:Create(v, TweenInfo.new(0.18, Enum.EasingStyle.Quad), {BackgroundTransparency = 1}):Play()
            v.Visible = false
        end
    end
    if pages[tabName] then
        pages[tabName].Visible = true
        pages[tabName].BackgroundTransparency = 1
        pages[tabName].Position = UDim2.new(0, 16, 0, 0)
        pages[tabName].BackgroundTransparency = 1
        TweenService:Create(pages[tabName], TweenInfo.new(0.28, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Position = UDim2.new(0,0,0,0)}):Play()
    end
    -- highlight button
    for name,btn in pairs(tabButtons) do
        btn.BackgroundColor3 = Color3.fromRGB(26,26,32)
    end
    if tabButtons[tabName] then tabButtons[tabName].BackgroundColor3 = Color3.fromRGB(36,36,48) end
    currentTab = tabName
    pcall(function() sClick:Play() end)
end

btnHome.MouseButton1Click:Connect(function() switchTo("Home") end)
btnAuto.MouseButton1Click:Connect(function() switchTo("Auto-Tase") end)
btnSet.MouseButton1Click:Connect(function() switchTo("Settings") end)
btnCred.MouseButton1Click:Connect(function() switchTo("Credits") end)

-- Open / Close hub from dock
local hubVisible = false
local function openHub()
    if hubVisible then return end
    hubVisible = true
    hub.Visible = true
    TweenService:Create(hub, TweenInfo.new(0.36, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {Position = UDim2.new(0.04,0,0.12,0)}):Play()
    pcall(function() sOpen:Play() end)
    showToast("YHub Premium", "Welcome — Script by YOUNG", 3)
    -- apply saved theme
    local themeName = savedData.theme or LocalPlayer:GetAttribute("YHub_Theme") or defaultData.theme
    applyTheme(themeName)
    -- switch to last used or Home
    switchTo(currentTab or "Home")
end
local function closeHub()
    if not hubVisible then return end
    hubVisible = false
    TweenService:Create(hub, TweenInfo.new(0.24, Enum.EasingStyle.Quad, Enum.EasingDirection.In), {Position = UDim2.new(-1,0,0.12,0)}):Play()
    delay(0.26, function() if not hubVisible then hub.Visible = false end end)
end

dock.MouseButton1Click:Connect(function()
    if hubVisible then closeHub() else openHub() end
end)

UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == Enum.KeyCode.Escape then
        if promoModal.Visible then promoModal.Visible = false
        elseif hubVisible then closeHub() end
    end
end)

-- live stat updater
spawn(function()
    while true do
        liveStat.Text = "Players in range: "..tostring(playersInRange)
        wait(0.25)
    end
end)

-- initial setup: load saved data into ui
local function initFromSaved()
    -- theme
    local themeName = savedData.theme or LocalPlayer:GetAttribute("YHub_Theme") or defaultData.theme
    applyTheme(themeName)
    -- radius
    local r = savedData.radius or LocalPlayer:GetAttribute("YHub_Radius") or defaultData.radius
    local p = (r - 6) / 54
    setRadiusFromPercent = setRadiusFromPercent or function() end -- ensure exists
    -- use existing slider setter
    -- find handle + sliderBG from earlier closure - call via existing variable
    -- we already set slider state earlier; just set attributes
    LocalPlayer:SetAttribute("YHub_Radius", r)
    -- dock pos
    if savedData.dockX and savedData.dockY then
        dock.Position = UDim2.new(0, savedData.dockX, 0, savedData.dockY)
        LocalPlayer:SetAttribute("YHub_DockX", savedData.dockX)
        LocalPlayer:SetAttribute("YHub_DockY", savedData.dockY)
    end
end

-- apply theme and initial data
initFromSaved()

-- Attempt to auto-start autoTase if previously enabled (we didn't persist ON/OFF by default)
-- startAutoTase(savedData.radius or LocalPlayer:GetAttribute("YHub_Radius") or DEFAULT_RADIUS)

-- try to save current settings when the player leaves (client attempts server save on bind)
game:BindToClose(function()
    local payload = { theme = savedData.theme or defaultData.theme, radius = savedData.radius or defaultData.radius, dockX = LocalPlayer:GetAttribute("YHub_DockX"), dockY = LocalPlayer:GetAttribute("YHub_DockY") }
    if persistenceAvailable then
        requestServerSave(payload)
    else
        localSave(payload)
    end
    stopAutoTase()
end)

-- convenience: if server persistence is missing, notify developer
if not persistenceAvailable then
    showToast("Persistence Notice", "Server persistence (DataStore) not found. Save will be session-only unless you add the server script.", 5)
end

-- finalize
equipTaser()
showToast("Loaded", "YHub Premium v16 loaded — by YOUNG", 3)
